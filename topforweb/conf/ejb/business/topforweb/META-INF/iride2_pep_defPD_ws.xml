<porta-delegata name="PolicyEnforcerBase">
  
  <services>
    <service
      name="PolicyEnforcerBase"
      public-interface-class="it.csi.iride2.policy.interfaces.PolicyEnforcerBaseService">
      <operations>
        <operation name="identificaUserPassword" type="synch-call">
          <param-list>
            <param name="username" type="java.lang.String" />
            <param name="password" type="java.lang.String" />
          </param-list>
          <ret-val type="it.csi.iride2.policy.entity.Identita"/>
        </operation>
        <operation name="identificaUserPasswordPIN" type="synch-call">
          <param-list>
            <param name="username" type="java.lang.String" />
            <param name="password" type="java.lang.String" />
            <param name="pin" type="java.lang.String" />
          </param-list>
          <ret-val type="it.csi.iride2.policy.entity.Identita"/>
        </operation>
        <operation name="identificaCertificato" type="synch-call">
          <param-list>
            <param name="certificato" type="byte[]" />
          </param-list>
          <ret-val type="it.csi.iride2.policy.entity.Identita"/>
        </operation>
        <operation name="isPersonaAutorizzataInUseCase" type="synch-call">
          <param-list>
            <param name="persona" type="it.csi.iride2.policy.entity.Identita" />
            <param name="useCase" type="it.csi.iride2.policy.entity.UseCase" />
          </param-list>
          <ret-val type="boolean"/>
        </operation>
        <operation name="isPersonaInRuolo" type="synch-call">
          <param-list>
            <param name="persona" type="it.csi.iride2.policy.entity.Identita" />
            <param name="ruolo" type="it.csi.iride2.iridefed.entity.Ruolo" />
          </param-list>
          <ret-val type="boolean"/>
        </operation>
        <operation name="getInfoPersonaInUseCase" type="synch-call">
          <param-list>
            <param name="persona" type="it.csi.iride2.policy.entity.Identita" />
            <param name="useCase" type="it.csi.iride2.policy.entity.UseCase" />
          </param-list>
          <ret-val type="java.lang.String"/>
        </operation>
        <operation name="findRuoliForPersonaInUseCase" type="synch-call">
          <param-list>
            <param name="persona" type="it.csi.iride2.policy.entity.Identita" />
            <param name="useCase" type="it.csi.iride2.policy.entity.UseCase" />
          </param-list>
          <ret-val type="it.csi.iride2.iridefed.entity.Ruolo[]"/>
        </operation>
        <operation name="findRuoliForPersonaInApplication" type="synch-call">
          <param-list>
            <param name="persona" type="it.csi.iride2.policy.entity.Identita" />
            <param name="app" type="it.csi.iride2.policy.entity.Application" />
          </param-list>
          <ret-val type="it.csi.iride2.iridefed.entity.Ruolo[]"/>
        </operation>
        <operation name="findUseCasesForPersonaInApplication" type="synch-call">
          <param-list>
            <param name="persona" type="it.csi.iride2.policy.entity.Identita" />
            <param name="app" type="it.csi.iride2.policy.entity.Application" />
          </param-list>
          <ret-val type="it.csi.iride2.policy.entity.UseCase[]"/>
        </operation>
        <operation name="findActorsForPersonaInApplication" type="synch-call">
          <param-list>
            <param name="persona" type="it.csi.iride2.policy.entity.Identita" />
            <param name="app" type="it.csi.iride2.policy.entity.Application" />
          </param-list>
          <ret-val type="it.csi.iride2.policy.entity.Actor[]"/>
        </operation>
        <operation name="isIdentitaAutentica" type="synch-call">
          <param-list>
            <param name="persona" type="it.csi.iride2.policy.entity.Identita" />
          </param-list>
          <ret-val type="boolean"/>
        </operation>
        <operation name="getInfoPersonaSchema" type="synch-call">
          <param-list>
            <param name="codRuolo" type="it.csi.iride2.iridefed.entity.Ruolo" />
          </param-list>
          <ret-val type="java.lang.String"/>
        </operation>
        <operation name="findActorsForPersonaInUseCase" type="synch-call">
          <param-list>
            <param name="persona" type="it.csi.iride2.policy.entity.Identita" />
            <param name="useCase" type="it.csi.iride2.policy.entity.UseCase" />
          </param-list>
          <ret-val type="it.csi.iride2.policy.entity.Actor[]"/>
        </operation>
      </operations>
    </service>
  </services>

  <config>
    <url-pa>multi://</url-pa>
    <pluggable-pd-list chooser-class="it.csi.csi.porte.FixedDelegateChooser">
      <pluggable-pd name="policyEnf"
                    class="it.csi.csi.porte.jaxrpc.PortaDelegataWS" url-pa="***" url-qm="">
        <properties>

          <property name="csi.wrapper.wsinterf.class"
                     value="it.csi.iride2.policy.base.nmsf.stub.interf.PolicyEnforcerBase" />
          <!-- puo' valere 'java-net'(default), 'commons-http', 'apache-soap' -->
          <property name="csi.http.transport.type" value="commons-http" />
          <property name="csi.http.timeout" value="10000" />
          <!-- ereditato dalla superclasse ClassAdapter - rappresenta la classe
               della factory di stub (che implementa javax.xml.rpc.Service). Tale classe
               deve avere un costruttore vuoto. -->
          <property name="class"
                    value="it.csi.iride2.policy.base.nmsf.stub.interf.PolicyEnforcerBaseServiceLocator" />

          <!-- : l'url dell'endpoint del servizio (se non specificato, in genere
                 i toolkit wsdl inseriscono quello che era riportato nel wsdl). -->
          <property name="javax.xml.rpc.service.endpoint.address"
                    value="@IRIDE_WSFAD_URL@" />
           <!-- OAUTH In questo caso non usato -->
          <property name="csi.use.oauth" value="false" />

        </properties>
      </pluggable-pd>
    </pluggable-pd-list>
    <pre-function-handler-list>
      <pluggable-fh name="isoint_pre"
                    class="it.csi.csi.porte.jaxrpc.pfh.IsoIntTransformer">
        <properties>
          <property name="source.interface"
                    value="it.csi.iride2.policy.interfaces.PolicyEnforcerBaseService" />
          <property name="target.interface"
                    value="it.csi.iride2.policy.base.nmsf.stub.interf.PolicyEnforcerBase" />
          <property name="pkg-map-1"
                    value="it.csi.iride2.policy.entity=it.csi.iride2.policy.base.nmsf.stub.base.entity"/>
         <property name="pkg-map-2"
                    value="it.csi.iride2.policy.exceptions=it.csi.iride2.policy.base.nmsf.stub.base.exceptions"/>
         <property name="pkg-map-3"
                    value="it.csi.iride2.iridefed.entity=it.csi.iride2.policy.base.nmsf.stub.iridefed.entity"/>
		 <property name="pkg-map-4"
                    value="it.csi.iride2.iridefed.exceptions=it.csi.iride2.policy.base.nmsf.stub.iridefed.exceptions"/>
         <property name="pkg-map-5"
                    value="it.csi.csi.wrapper=it.csi.iride2.policy.base.nmsf.stub.csi.exceptions"/>
        </properties>
      </pluggable-fh>
      <pluggable-fh
         name="CACHE PRE"
         class="it.csi.taif.topforweb.business.IridePDCache" >
        <properties>
       </properties>
      </pluggable-fh>
    </pre-function-handler-list>
    <post-function-handler-list>
      <pluggable-fh
         name="CACHE POST"
         class="it.csi.taif.topforweb.business.IridePDCache" >
        <properties>
       </properties>
      </pluggable-fh>
      <pluggable-fh name="isoint_pre"
                    class="it.csi.csi.porte.jaxrpc.pfh.IsoIntTransformer">
        <properties>
         <property name="source.interface"
                    value="it.csi.iride2.policy.interfaces.PolicyEnforcerBaseService" />
         <property name="target.interface"
                    value="it.csi.iride2.policy.base.nmsf.stub.interf.PolicyEnforcerBase" />
                    
         <property name="pkg-map-1"
                    value="it.csi.iride2.policy.entity=it.csi.iride2.policy.base.nmsf.stub.base.entity"/>
         <property name="pkg-map-2"
                    value="it.csi.iride2.policy.exceptions=it.csi.iride2.policy.base.nmsf.stub.base.exceptions"/>
         <property name="pkg-map-3"
                    value="it.csi.iride2.iridefed.entity=it.csi.iride2.policy.base.nmsf.stub.iridefed.entity"/>
		 <property name="pkg-map-4"
                    value="it.csi.iride2.iridefed.exceptions=it.csi.iride2.policy.base.nmsf.stub.iridefed.exceptions"/>
         <property name="pkg-map-5"
                    value="it.csi.csi.wrapper=it.csi.iride2.policy.base.nmsf.stub.csi.exceptions"/>
        </properties>
      </pluggable-fh>
    </post-function-handler-list>
    <queue-manager url="rmi://:2001/QMgrCli"/>
  </config>
</porta-delegata>
